{"version":3,"file":"static/js/812.b5f0a5d1.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    // process.env.PUBLIC_URL + '/error.gif'\r\n    return (\r\n        <img style={{display: \"block\", width: \"250px\", height: \"250px\", objectFit: \"contain\", margin: \"0 auto\"}} src={img} alt=\"error\" />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\n\nimport setContent from '../../utils/setContent';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState({});\n\n    const { getCharacter, clearError, process, setProcess } = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        // const timerId = setInterval(updateChar, 60000);\n        // return () => {\n        //     clearInterval(timerId)\n        // }\n    }, []);\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    return (\n        <div className=\"randomchar\">\n            {setContent(process, View, char)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br />\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n            </div>\n        </div>\n    )\n}\n\n\nconst View = ({ data }) => {\n    const { name, description, thumbnail, homepage, wiki } = data;\n    let imgStyle = { 'objectFit': 'cover' };\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = { 'objectFit': 'contain' };\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle} />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\nimport useMarvelService from '../../services/MarvelService';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner />;\n        case 'loading':\n            return newItemLoading ? <Component /> : <Spinner />;\n        case 'confirmed':\n            return <Component />;\n        case 'error':\n            return <ErrorMessage />;\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nconst CharList = (props) => {\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const {getAllCharacters, process, setProcess } = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, []);\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(false);\n        setOffset(offset => offset + 9);\n        setCharEnded(ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    // Этот метод создан для оптимизации,\n    // чтобы не помещать такую конструкцию в метод render\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            let imgStyle = { 'objectFit': 'cover' };\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = { 'objectFit': 'unset' };\n            }\n\n            return (\n                <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n                    <li\n                        className=\"char__item\"\n                        tabIndex={0}\n                        ref={el => itemRefs.current[i] = el}\n                        onClick={() => {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }}\n                        onKeyPress={(e) => {\n                            if (e.key === ' ' || e.key === \"Enter\") {\n                                props.onCharSelected(item.id);\n                                focusOnItem(i);\n                            }\n                        }}>\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n                        <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n        // А эта конструкция вынесена для центровки спиннера/ошибки\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    const elements = useMemo(() => {\n        return setContent(process, () => renderItems(charList), newItemLoading);\n        // eslint-disable-next-line\n    }, [process])\n\n    return (\n        <div className=\"char__list\">\n            {elements}\n            <button\n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{ 'display': charEnded ? 'none' : 'block' }}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport useMarvelService from '../../services/MarvelService';\n\nimport setContent from '../../utils/setContent';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const { getCharacter, clearError, process, setProcess } = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId]);\n\n    const updateChar = () => {\n        const { charId } = props;\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n\n\n    // const skeleton = char || loading || error ? null : <Skeleton />;\n    // const errorMessage = error ? <ErrorMessage /> : null;\n    // const spinner = loading ? <Spinner /> : null;\n    // const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"char__info\">\n            {setContent(process, View, char)}\n        </div>\n    )\n}\n\nconst View = ({ data }) => {\n    const { name, description, thumbnail, homepage, wiki, comics } = data;\n\n    let imgStyle = { 'objectFit': 'cover' };\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = { 'objectFit': 'contain' };\n    }\n\n    return (<>\n        <div className=\"char__basics\">\n            <img src={thumbnail} alt={name} style={imgStyle} />\n            <div>\n                <div className=\"char__info-name\">{name}</div>\n                <div className=\"char__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n        <div className=\"char__descr\">\n            {description}\n        </div>\n        <div className=\"char__comics\">Comics:</div>\n        <ul className=\"char__comics-list\">\n            {comics.length > 0 ? null : 'This is no comics with this character'}\n            {\n                comics.map((item, i) => {\n                    if (i > 9) return null;\n                    return (\n                        <Link to={`/marvel_starter/comics/${item.resourceURI.match(/\\/([^\\/]+)\\/?$/)[1]}`} key={i} className=\"char__comics-item\">\n                            {item.name}\n                        </Link>\n                    )\n                })\n            }\n        </ul>\n    </>)\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const { getCharacterByName, clearError, process, setProcess } = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'))\r\n    }\r\n\r\n    const errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/marvel_starter/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field\r\n                            id=\"charName\"\r\n                            name='charName'\r\n                            type='text'\r\n                            placeholder=\"Enter name\"/>\r\n                        <button\r\n                            type='submit'\r\n                            className=\"button button__main\"\r\n                            disabled={process === 'loading'}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    // static getDerivedStateFromError(error) {\r\n    //     return {error: true};\r\n    // }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({error: true});\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n        \r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar />\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected} />\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar} />\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","import { useHttp } from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const { request, clearError, process, setProcess } = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=e6eda5e930784388a55a5924c8bde8bf';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects.language || 'en-us',\r\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available'\r\n        }\r\n    }\r\n\r\n    return { clearError, process, setProcess, getAllCharacters, getCharacterByName, getCharacter, getAllComics, getComic }\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from 'react';\r\n\r\nexport const useHttp = () => {\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, { method, body, headers });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            return data;\r\n        } catch (e) {\r\n            setProcess('error');\r\n\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcess('loading');\r\n    }, []);\r\n\r\n    return { request, clearError, process, setProcess }\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Skeleton />;\r\n        case 'loading':\r\n            return <Spinner />;\r\n        case 'confirmed':\r\n            return <Component data={data} />;\r\n        case 'error':\r\n            return <ErrorMessage />;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;"],"names":["style","display","width","height","objectFit","margin","src","img","alt","View","data","name","description","thumbnail","homepage","wiki","imgStyle","className","href","useState","char","setChar","useMarvelService","getCharacter","clearError","process","setProcess","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","Spinner","ErrorMessage","Error","arr","items","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","comics","to","resourceURI","match","charId","getCharacterByName","errorMessage","results","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","ErrorBoundary","state","error","errorInfo","console","log","this","setState","children","selectedChar","Helmet","content","decoration","request","useCallback","url","method","body","headers","fetch","response","ok","status","json","useHttp","_apiBase","_apiKey","res","_transformCharacter","getAllComics","_transformComics","getComic","slice","path","extension","urls","title","pageCount","language","textObjects","price","prices"],"sourceRoot":""}